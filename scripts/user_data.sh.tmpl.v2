#!/bin/bash

# Terraform-provided variables (single $ for Terraform interpolation)
SSH_KEYS='${SSH_KEYS}'
ALLOW_ROOT='${ALLOW_ROOT}'
TARGET_USER='${TARGET_USER}'
TARGET_HOME='${TARGET_HOME}'

set -euo pipefail
shopt -s failglob || true

export DEBIAN_FRONTEND=noninteractive


# -----------------------------
# SSH Key Management (target user)
# -----------------------------

if [ -n "$${SSH_KEYS}" ]; then
  if [ ! -d "$${TARGET_HOME}/.ssh" ]; then
    mkdir -p "$${TARGET_HOME}/.ssh"
    chmod 700 "$${TARGET_HOME}/.ssh"
    touch "$${TARGET_HOME}/.ssh/authorized_keys"
  fi

  # Process keys one by one to avoid multi-line issues
  echo "$${SSH_KEYS}" | while read -r key; do
    if [ -n "$${key}" ] && ! grep -qF "$${key}" "$${TARGET_HOME}/.ssh/authorized_keys"; then
      echo "$${key}" >> "$${TARGET_HOME}/.ssh/authorized_keys"
    fi
  done

  chmod 600 "$${TARGET_HOME}/.ssh/authorized_keys"
  chown -R "$${TARGET_USER}":"$${TARGET_USER}" "$${TARGET_HOME}/.ssh"
fi

# -----------------------------
# SSH Key Management for root (optional)
# -----------------------------

if [ -n "$${SSH_KEYS}" ] && [ "$${ALLOW_ROOT}" = "true" ]; then
  echo "Starting SSH Key Management Deployment for root"

  if [ ! -d "/root/.ssh" ]; then
    mkdir -p /root/.ssh
    chmod 700 /root/.ssh
    touch /root/.ssh/authorized_keys
  fi

  echo "$${SSH_KEYS}" | while read -r key; do
    if [ -n "$${key}" ] && ! grep -qF "$${key}" /root/.ssh/authorized_keys; then
      echo "$${key}" >> /root/.ssh/authorized_keys
    fi
  done

  chmod 600 /root/.ssh/authorized_keys
  chown -R root:root /root/.ssh
  echo "Ending SSH Key Management Deployment for root"
fi

# -----------------------------
# Base deps for SSM + helpers (Debian)
# -----------------------------
apt-get -y update
apt-get -y upgrade
apt-get install -y curl jq ca-certificates gnupg

# -----------------------------
# SSM Agent install/enable (Debian, with S3 fallback)
# -----------------------------
get_imds_token() {
  curl -sS -m 2 -X PUT "http://169.254.169.254/latest/api/token" \
    -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" || true
}
imds_get() {
  local path="$1"
  local token
  token="$(get_imds_token)"
  if [ -n "$token" ]; then
    curl -sS -m 2 -H "X-aws-ec2-metadata-token: $token" "http://169.254.169.254/$path" || true
  else
    curl -sS -m 2 "http://169.254.169.254/$path" || true
  fi
}

ensure_ssm_agent() {
  # 1) Try Debian repo (present on many Debian/Ubuntu builds)
  if apt-get install -y amazon-ssm-agent; then
    systemctl enable --now amazon-ssm-agent || true
    return 0
  fi

  # 2) Fallback: download .deb from the regional S3 bucket
  REGION="$(imds_get latest/dynamic/instance-identity/document | awk -F\" '/region/ {print $4}')"
  ARCH="$(dpkg --print-architecture 2>/dev/null || echo amd64)"
  # Map common arch names if needed
  case "$ARCH" in
    amd64|x86_64) DEB_ARCH="amd64" ;;
    arm64|aarch64) DEB_ARCH="arm64" ;;
    *) DEB_ARCH="amd64" ;;
  esac

  PKG="/tmp/amazon-ssm-agent.deb"
  URL="https://s3.$REGION.amazonaws.com/amazon-ssm-$REGION/latest/debian_$${DEB_ARCH}/amazon-ssm-agent.deb"
  if curl -fsSL "$URL" -o "$PKG"; then
    dpkg -i "$PKG" || apt-get -y -f install
    systemctl enable --now amazon-ssm-agent || true
    return 0
  fi

  echo "WARN: Failed to install amazon-ssm-agent via repo and S3 fallback."
  return 1
}
ensure_ssm_agent || true
