#!/bin/bash
#
# Universal ECGroup bootstrap (Ubuntu/Debian + Rocky/Alma/RHEL)
# - Installs SSM Agent (repo â†’ S3 fallback)
# - Installs Ansible, AWS CLI, and dependencies for ECGroup configuration
# - Fetches ECGroup private key from Secrets Manager
# - Manages SSH keys for TARGET_USER and root
# - Relaxes SSH host key prompts

set -euo pipefail

# Terraform-provided variables
SSH_KEYS='${SSH_KEYS}'
ALLOW_ROOT='${ALLOW_ROOT}'
TARGET_USER='${TARGET_USER}'
TARGET_HOME='${TARGET_HOME}'
PRIVATE_KEY_SECRET_ARN='${PRIVATE_KEY_SECRET_ARN}'
REGION_IN='${REGION}'

# -----------------------------
# OS detection helpers
# -----------------------------
if [ -r /etc/os-release ]; then
  . /etc/os-release
fi

# Helpers
have_cmd() { command -v "$1" >/dev/null 2>&1; }
try() { "$@" || true; }

echo "[bootstrap] Starting ECGroup bootstrap process..."

# -----------------------------
# Minimal deps for SSM/AWS CLI
# -----------------------------
if have_cmd apt-get; then
  export DEBIAN_FRONTEND=noninteractive
  try apt-get -y update
  try apt-get install -y curl ca-certificates jq unzip
elif have_cmd dnf; then
  try dnf -y upgrade || true
  try dnf install -y curl ca-certificates jq unzip
elif have_cmd yum; then
  try yum -y update || true
  try yum install -y curl ca-certificates jq unzip
else
  echo "[bootstrap] ERROR: No supported package manager (apt-get, dnf, yum)"
  exit 1
fi

# -----------------------------
# Install AWS CLI v2 (needed for Secrets Manager)
# -----------------------------
if ! have_cmd aws; then
  echo "[bootstrap] Installing AWS CLI..."
  ARCH="$(uname -m)"
  if [ "$ARCH" = "x86_64" ]; then
    CLIZIP="awscli-exe-linux-x86_64.zip"
  elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
    CLIZIP="awscli-exe-linux-aarch64.zip"
  else
    echo "[bootstrap] ERROR: Unsupported architecture: $ARCH"
    exit 1
  fi
  curl -fsSL "https://awscli.amazonaws.com/$CLIZIP" -o "/tmp/awscliv2.zip" > /tmp/curl_status.log 2>&1 || {
    STATUS=$(cat /tmp/curl_status.log)
    echo "[bootstrap] ERROR: Failed to download AWS CLI from https://awscli.amazonaws.com/$CLIZIP (HTTP $STATUS)"
    exit 1
  }
  unzip -q /tmp/awscliv2.zip -d /tmp/awscli || {
    echo "[bootstrap] ERROR: Failed to unzip /tmp/awscliv2.zip"
    exit 1
  }
  /tmp/awscli/aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update || {
    echo "[bootstrap] ERROR: Failed to install AWS CLI"
    exit 1
  }
  if ! have_cmd aws; then
    echo "[bootstrap] ERROR: AWS CLI installation failed, command not found"
    exit 1
  fi
  echo "[bootstrap] AWS CLI installed: $(aws --version)"
fi

# -----------------------------
# SSM Agent install/enable
# -----------------------------
get_imds_token() {
  curl -sS -m 2 -X PUT "http://169.254.169.254/latest/api/token" \
    -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" || true
}

imds_get() {
  local path="$1"
  local token
  token=$(get_imds_token)
  if [ -n "$token" ]; then
    curl -sS -m 2 -H "X-aws-ec2-metadata-token: $token" "http://169.254.169.254/$path" || true
  else
    curl -sS -m 2 "http://169.254.169.254/$path" || true
  fi
}

ensure_ssm_agent() {
  if systemctl list-unit-files | grep -q '^amazon-ssm-agent\.service'; then
    try systemctl enable --now amazon-ssm-agent
    return 0
  fi

  REGION="$(imds_get latest/dynamic/instance-identity/document | awk -F\" '/region/ {print $4}')"
  ARCH="$(uname -m)"
  if [ "$ARCH" = "x86_64" ]; then DEB_ARCH="amd64"; RPM_ARCH="linux_amd64"
  elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then DEB_ARCH="arm64"; RPM_ARCH="linux_arm64"
  else DEB_ARCH="amd64"; RPM_ARCH="linux_amd64"; fi

  if have_cmd apt-get; then
    if apt-get install -y amazon-ssm-agent; then
      try systemctl enable --now amazon-ssm-agent
      return 0
    fi
    PKG="/tmp/amazon-ssm-agent.deb"
    URL="https://s3.$REGION.amazonaws.com/amazon-ssm-$REGION/latest/debian_$DEB_ARCH/amazon-ssm-agent.deb"
    if curl -fsSL "$URL" -o "$PKG"; then
      dpkg -i "$PKG" || apt-get -y -f install
      try systemctl enable --now amazon-ssm-agent
      rm -f "$PKG"
      return 0
    fi
  elif have_cmd dnf || have_cmd yum; then
    if have_cmd dnf && dnf install -y amazon-ssm-agent; then
      try systemctl enable --now amazon-ssm-agent
      return 0
    elif have_cmd yum && yum install -y amazon-ssm-agent; then
      try systemctl enable --now amazon-ssm-agent
      return 0
    fi
    PKG="/tmp/amazon-ssm-agent.rpm"
    URL="https://s3.$REGION.amazonaws.com/amazon-ssm-$REGION/latest/$RPM_ARCH/amazon-ssm-agent.rpm"
    if curl -fsSL "$URL" -o "$PKG"; then
      if have_cmd dnf; then dnf -y install "$PKG" || true; else yum -y install "$PKG" || true; fi
      try systemctl enable --now amazon-ssm-agent
      rm -f "$PKG"
      return 0
    fi
  fi
  echo "[bootstrap] WARN: Failed to install amazon-ssm-agent via all methods."
  return 1
}

echo "[bootstrap] Ensuring SSM agent is installed and running..."
ensure_ssm_agent
echo "[bootstrap] SSM ready"

# -----------------------------
# Base packages + Ansible
# -----------------------------
if have_cmd apt-get; then
  export DEBIAN_FRONTEND=noninteractive
  try apt-get -y update
  try apt-get install -y python3 python3-pip net-tools
  try apt-get install -y emacs
elif have_cmd dnf; then
  try dnf -y upgrade
  try dnf -y install epel-release
  try dnf install -y python3 python3-pip net-tools
elif have_cmd yum; then
  try yum -y update
  try yum -y install epel-release
  try yum install -y python3 python3-pip
else
  echo "[bootstrap] ERROR: No supported package manager (apt-get, dnf, yum)"
  exit 1
fi

# -----------------------------
# SSH: Fetch private key (Secrets Manager) & set up files
# -----------------------------
if [ -n "$PRIVATE_KEY_SECRET_ARN" ] && [ "$PRIVATE_KEY_SECRET_ARN" != "null" ]; then
  echo "[bootstrap] Fetching private key from Secrets Manager..."
  aws --region "${REGION_IN}" secretsmanager get-secret-value \
    --secret-id "${PRIVATE_KEY_SECRET_ARN}" \
    --query SecretString --output text > /tmp/ecgroups.key 2> /tmp/awscli_error.log || {
    echo "[bootstrap] ERROR: Failed to fetch private key from Secrets Manager: $(cat /tmp/awscli_error.log)"
    exit 1
  }
  install -m 600 -o root -g root /tmp/ecgroups.key /etc/ecgroups/keys/ecgroups
  shred -u /tmp/ecgroups.key || true
fi

# -----------------------------
# SSH Key Management (target user)
# -----------------------------
if [ -n "$SSH_KEYS" ] && [ "$SSH_KEYS" != "null" ]; then
  echo "[bootstrap] Start Add SSH Keys to authorized_keys for ${TARGET_USER}"
  mkdir -p "${TARGET_HOME}/.ssh"
  chmod 700 "${TARGET_HOME}/.ssh"
  touch "${TARGET_HOME}/.ssh/authorized_keys"
  echo "${SSH_KEYS}" | while read -r key; do
    if [ -n "${key}" ] && ! grep -qF "${key}" "${TARGET_HOME}/.ssh/authorized_keys"; then
      echo "${key}" >> "${TARGET_HOME}/.ssh/authorized_keys"
    fi
  done
  chmod 600 "${TARGET_HOME}/.ssh/authorized_keys"
  chown -R "${TARGET_USER}":"${TARGET_USER}" "${TARGET_HOME}/.ssh"
  echo "[bootstrap] End Add SSH Keys"
fi

# -----------------------------
# SSH Key Management for root (optional)
# -----------------------------
if [ -n "$SSH_KEYS" ] && [ "$SSH_KEYS" != "null" ] && [ "${ALLOW_ROOT}" = "true" ]; then
  echo "[bootstrap] Starting SSH Key Management Deployment for root"
  mkdir -p /root/.ssh && chmod 700 /root/.ssh
  if [ -f /root/.ssh/authorized_keys ]; then
      PUBLIC_KEY=$(head -1 /root/.ssh/authorized_keys | sed -n 's/.*\(\(ssh-\|ecdsa-\)[^ ]* [^ ]*\).*/\1/p')
      if [ ! -z "$PUBLIC_KEY" ]; then
          echo "[bootstrap] ---- Remove no-port-forwarding from root authorized_keys"
          echo $PUBLIC_KEY > /root/.ssh/authorized_keys.tmp
          mv /root/.ssh/authorized_keys.tmp /root/.ssh/authorized_keys
          echo "[bootstrap] Done removing no-port-forwarding"
      fi
  else
      touch /root/.ssh/authorized_keys
  fi

  echo "[bootstrap] Starting SSH Key Management Deployment for root"
  echo "${SSH_KEYS}" | while read -r key; do
    if [ -n "${key}" ] && ! grep -qF "${key}" /root/.ssh/authorized_keys; then
      echo "${key}" >> /root/.ssh/authorized_keys
    fi
  done
  chmod 600 /root/.ssh/authorized_keys
  chown -R root:root /root/.ssh
  echo "[bootstrap] Ending SSH Key Management Deployment for root"
fi

# -----------------------------
# Configure SSH settings
# -----------------------------
echo "[bootstrap] Configuring SSH settings..."
tee -a /etc/ssh/ssh_config > /dev/null <<'EOF'
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
EOF

tee -a /etc/ssh/sshd_config > /dev/null <<'EOF'
PermitRootLogin yes
PubkeyAuthentication yes
EOF

# Restart SSH service
if systemctl is-active --quiet sshd; then
  try systemctl restart sshd
elif systemctl is-active --quiet ssh; then
  try systemctl restart ssh
fi

echo "[bootstrap] ECGroup bootstrap process complete."
